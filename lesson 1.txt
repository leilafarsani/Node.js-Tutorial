Node - 1
Learning Objectives
By the end of this lesson trainees should be able to:

Define what an API is used for
Use Glitch to deploy and edit express servers
Use npm to start a node server
Explain what express is and what it is used for
Use express to create an API that will accept a GET request that returns JSON
Implement routing to return different resources depending on URL
Implement query params to return different content (?query=ses)

1)  API Refresh
EXERCISE
Exercise: Discuss known APIs

Groups discuss any APIs they know about.
What might you do with it?
Announce answers to class.

Before we make our own API, let's look at and use some other APIs.

Here's an example API that shows us the Sunrise and Sunset 
times of everywhere in the world.

Root
https://sunrise-sunset.org/api
Example: Sunset time in Bethnal Green
https://api.sunrise-sunset.org/json?lat=51.5311&lng=0.0481

Group Exercise 

Pick a couple of these and experiment with them, modify the requests, report your findings.

http://www.tvmaze.com/api
e.g. http://api.tvmaze.com/shows/82/episodes
Sunrise/Sunset times: https://sunrise-sunset.org/api
e.g. Sunset in Bethnal Green: https://api.sunrise-sunset.org/json?lat=51.5311&lng=0.0481
Google Books API: https://www.googleapis.com/books/v1/volumes?q=isbn:0747532699
Star Wars API: https://swapi.co/
e.g.https://swapi.co/api/people/1/
UK Police Data. https://data.police.uk/docs/
e.g. street-level crimes, Old Street, London: https://data.police.uk/api/crimes-street/all-crime?lat=51.5268&lng=0.0866
iTunes Search API: https://affiliate.itunes.apple.com/resources/documentation/itunes-store-web-service-search-api/
e.g. All Beyonce's music videos: https://itunes.apple.com/search?term=beyonce&entity=musicVideo
CYF resource-library https://resource-library.codeyourfuture.io/api/resources
(Difficult) Wikipedia API: https://en.wikipedia.org/w/api.php?


So what's the big deal? I can see this information on web sites already!
What's an API and how is it different from a web site?


2) Intro to Node on Glitch
2.1) Running a Simple Server
Run the simplest web server code.

We've made a really simple server about cats. You can check it out here:

Source https://glitch.com/~cyfcats
Live  https://cyfcats.glitch.me/

TEACHER-LED LIVE CODING EXAMPLE
Let's inspect the different parts of the Node App and how Express works. Let's discuss

require on Line 1
express() on Line 2
app.get() on Line 10
app.listen() on Line 15
response.sendFile() on Line 6 and Line 7
Can we work out what each those lines are doing?

TEACHER-LED LIVE CODING EXAMPLE
As a class - try to make a simple express server.

You can pick any theme you like but maybe try

The class' favorite foods
The class' favorite songs
or get ideas from the class!
The server should have one endpoint. When you 
request the data from that endpoint it should 
give you the whole list of items that are stored in your node server.

Now let's make a server ourselves from scratch...

EXERCISE:
Make your own node server on glitch

All trainees should "remix" this one for a simple start:
https://glitch.com/~cyf-simple-express Have them it read
and modify it to do something different.

Login to Glitch and ‘remix’ this project and rename to be yours
e.g. say "Hello Miles", instead of "Hello Kash"
Make it return an array of strings as json.
Make it return the current time
Advanced: make it return whatever you want! 3 minutes.

3) Make a Node API
The rest of today's lesson is a workshop.
In small groups complete each of the steps below.
At different points, the teacher will introduce new concepts.

3.1) Get Started
Fork and clone the repo https://github.com/CodeYourFuture/Node-Starter-Kit.

It is an empty project that includes all the details
you need to get started building your first Node App.

